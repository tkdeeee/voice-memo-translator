{"version":3,"file":"VoiceRecorderImpl.js","sourceRoot":"","sources":["../../src/VoiceRecorderImpl.ts"],"names":[],"mappings":"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","sourcesContent":["import { Filesystem } from '@capacitor/filesystem';\nimport write_blob from 'capacitor-blob-writer';\nimport getBlobDuration from 'get-blob-duration';\n\nimport type {\n  Base64String,\n  CurrentRecordingStatus,\n  GenericResponse,\n  RecordingData,\n  RecordingOptions,\n} from './definitions';\nimport { RecordingStatus } from './definitions';\nimport {\n  alreadyRecordingError,\n  couldNotQueryPermissionStatusError,\n  deviceCannotVoiceRecordError,\n  emptyRecordingError,\n  failedToFetchRecordingError,\n  failedToRecordError,\n  failureResponse,\n  missingPermissionError,\n  recordingHasNotStartedError,\n  successResponse,\n} from './predefined-web-responses';\n\n// these mime types will be checked one by one in order until one of them is found to be supported by the current browser\nconst POSSIBLE_MIME_TYPES = {\n  'audio/aac': '.aac',\n  'audio/webm;codecs=opus': '.ogg',\n  'audio/mp4': '.mp3',\n  'audio/webm': '.ogg',\n  'audio/ogg;codecs=opus': '.ogg',\n};\nconst neverResolvingPromise = (): Promise<any> => new Promise(() => undefined);\n\nexport class VoiceRecorderImpl {\n  private mediaRecorder: MediaRecorder | null = null;\n  private chunks: any[] = [];\n  private pendingResult: Promise<RecordingData> = neverResolvingPromise();\n\n  public static async canDeviceVoiceRecord(): Promise<GenericResponse> {\n    if (navigator?.mediaDevices?.getUserMedia == null || VoiceRecorderImpl.getSupportedMimeType() == null) {\n      return failureResponse();\n    } else {\n      return successResponse();\n    }\n  }\n\n  public async startRecording(options?: RecordingOptions): Promise<GenericResponse> {\n    if (this.mediaRecorder != null) {\n      throw alreadyRecordingError();\n    }\n    const deviceCanRecord = await VoiceRecorderImpl.canDeviceVoiceRecord();\n    if (!deviceCanRecord.value) {\n      throw deviceCannotVoiceRecordError();\n    }\n    const havingPermission = await VoiceRecorderImpl.hasAudioRecordingPermission().catch(() => successResponse());\n    if (!havingPermission.value) {\n      throw missingPermissionError();\n    }\n\n    return navigator.mediaDevices\n      .getUserMedia({ audio: true })\n      .then((stream) => this.onSuccessfullyStartedRecording(stream, options))\n      .catch(this.onFailedToStartRecording.bind(this));\n  }\n\n  public async stopRecording(): Promise<RecordingData> {\n    if (this.mediaRecorder == null) {\n      throw recordingHasNotStartedError();\n    }\n    try {\n      this.mediaRecorder.stop();\n      this.mediaRecorder.stream.getTracks().forEach((track) => track.stop());\n      return this.pendingResult;\n    } catch (ignore) {\n      throw failedToFetchRecordingError();\n    } finally {\n      this.prepareInstanceForNextOperation();\n    }\n  }\n\n  public static async hasAudioRecordingPermission(): Promise<GenericResponse> {\n    if (navigator.permissions.query == null) {\n      if (navigator.mediaDevices == null) {\n        return Promise.reject(couldNotQueryPermissionStatusError());\n      }\n      return navigator.mediaDevices\n        .getUserMedia({ audio: true })\n        .then(() => successResponse())\n        .catch(() => {\n          throw couldNotQueryPermissionStatusError();\n        });\n    }\n\n    return navigator.permissions\n      .query({ name: 'microphone' as any })\n      .then((result) => ({ value: result.state === 'granted' }))\n      .catch(() => {\n        throw couldNotQueryPermissionStatusError();\n      });\n  }\n\n  public static async requestAudioRecordingPermission(): Promise<GenericResponse> {\n    const havingPermission = await VoiceRecorderImpl.hasAudioRecordingPermission().catch(() => failureResponse());\n    if (havingPermission.value) {\n      return successResponse();\n    }\n\n    return navigator.mediaDevices\n      .getUserMedia({ audio: true })\n      .then(() => successResponse())\n      .catch(() => failureResponse());\n  }\n\n  public pauseRecording(): Promise<GenericResponse> {\n    if (this.mediaRecorder == null) {\n      throw recordingHasNotStartedError();\n    } else if (this.mediaRecorder.state === 'recording') {\n      this.mediaRecorder.pause();\n      return Promise.resolve(successResponse());\n    } else {\n      return Promise.resolve(failureResponse());\n    }\n  }\n\n  public resumeRecording(): Promise<GenericResponse> {\n    if (this.mediaRecorder == null) {\n      throw recordingHasNotStartedError();\n    } else if (this.mediaRecorder.state === 'paused') {\n      this.mediaRecorder.resume();\n      return Promise.resolve(successResponse());\n    } else {\n      return Promise.resolve(failureResponse());\n    }\n  }\n\n  public getCurrentStatus(): Promise<CurrentRecordingStatus> {\n    if (this.mediaRecorder == null) {\n      return Promise.resolve({ status: RecordingStatus.NONE });\n    } else if (this.mediaRecorder.state === 'recording') {\n      return Promise.resolve({ status: RecordingStatus.RECORDING });\n    } else if (this.mediaRecorder.state === 'paused') {\n      return Promise.resolve({ status: RecordingStatus.PAUSED });\n    } else {\n      return Promise.resolve({ status: RecordingStatus.NONE });\n    }\n  }\n\n  public static getSupportedMimeType<T extends keyof typeof POSSIBLE_MIME_TYPES>(): T | null {\n    if (MediaRecorder?.isTypeSupported == null) return null;\n\n    const foundSupportedType = Object.keys(POSSIBLE_MIME_TYPES).find((type) => MediaRecorder.isTypeSupported(type)) as\n      | T\n      | undefined;\n\n    return foundSupportedType ?? null;\n  }\n\n  private onSuccessfullyStartedRecording(stream: MediaStream, options?: RecordingOptions): GenericResponse {\n    this.pendingResult = new Promise((resolve, reject) => {\n      this.mediaRecorder = new MediaRecorder(stream);\n      this.mediaRecorder.onerror = () => {\n        this.prepareInstanceForNextOperation();\n        reject(failedToRecordError());\n      };\n      this.mediaRecorder.onstop = async () => {\n        const mimeType = VoiceRecorderImpl.getSupportedMimeType();\n        if (mimeType == null) {\n          this.prepareInstanceForNextOperation();\n          reject(failedToFetchRecordingError());\n          return;\n        }\n        const blobVoiceRecording = new Blob(this.chunks, { type: mimeType });\n        if (blobVoiceRecording.size <= 0) {\n          this.prepareInstanceForNextOperation();\n          reject(emptyRecordingError());\n          return;\n        }\n\n        let uri;\n        let recordDataBase64;\n        if (options != null) {\n          const subDirectory = options.subDirectory?.match(/^\\/?(.+[^/])\\/?$/)?.[1] ?? '';\n          const path = `${subDirectory}/recording-${new Date().getTime()}${POSSIBLE_MIME_TYPES[mimeType]}`;\n\n          await write_blob({\n            blob: blobVoiceRecording,\n            directory: options.directory,\n            fast_mode: true,\n            path,\n            recursive: true,\n          });\n\n          ({ uri } = await Filesystem.getUri({ directory: options.directory, path }));\n        } else {\n          recordDataBase64 = await VoiceRecorderImpl.blobToBase64(blobVoiceRecording);\n        }\n\n        const recordingDuration = await getBlobDuration(blobVoiceRecording);\n        this.prepareInstanceForNextOperation();\n        resolve({ value: { recordDataBase64, mimeType, msDuration: recordingDuration * 1000, uri } });\n      };\n      this.mediaRecorder.ondataavailable = (event: any) => this.chunks.push(event.data);\n      this.mediaRecorder.start();\n    });\n    return successResponse();\n  }\n\n  private onFailedToStartRecording(): GenericResponse {\n    this.prepareInstanceForNextOperation();\n    throw failedToRecordError();\n  }\n\n  private static blobToBase64(blob: Blob): Promise<Base64String> {\n    return new Promise((resolve) => {\n      const reader = new FileReader();\n      reader.onloadend = () => {\n        const recordingResult = String(reader.result);\n        const splitResult = recordingResult.split('base64,');\n        const toResolve = splitResult.length > 1 ? splitResult[1] : recordingResult;\n        resolve(toResolve.trim());\n      };\n      reader.readAsDataURL(blob);\n    });\n  }\n\n  private prepareInstanceForNextOperation(): void {\n    if (this.mediaRecorder != null && this.mediaRecorder.state === 'recording') {\n      try {\n        this.mediaRecorder.stop();\n      } catch (error) {\n        console.warn('While trying to stop a media recorder, an error was thrown', error);\n      }\n    }\n    this.pendingResult = neverResolvingPromise();\n    this.mediaRecorder = null;\n    this.chunks = [];\n  }\n}\n"]}